# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ bot_settings
from bot_settings import *

phone_num = ''

btn1 = False
btn2_1 = False
btn2_3 = False
def main_user():
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback(call):
        chat_id = call.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = load_data()
        global btn1, btn2, btn2_1, btn2_3

        if call.data == 'btn1':
            username = call.from_user.username
            user_states[chat_id] = 'awaiting_phone_input'
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–¥')# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(
                chat_id,
                'üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>87077777777</em>',
                parse_mode='html'
            )
            btn1 = True

        elif call.data == 'btn2_1':
            username = call.from_user.username
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä')
            user_states[chat_id] = 'awaiting_code_input'
            bot.send_message(
                chat_id,
                '‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥ –≤–∞—à–µ–π –ø–æ—Å—ã–ª–∫–∏.\n‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!',
                parse_mode='html'
            )
            btn2_1 = True

        elif call.data == 'btn2_2':
            username = call.from_user.username
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã')
            if username in data["users_and_packages"] and len(data["users_and_packages"][username]) != 0:
                result = [
                    f"{i + 1}# üì¶ <b>–¢–æ–≤–∞—Ä –ø–æ —Ç—Ä–µ–∫-–∫–æ–¥—É:</b> <code>{p}</code>\n"
                    f"üìç <b>–°—Ç–∞—Ç—É—Å:</b> {map_status_to_text(data['packages'][p])}\n"
                    for i, p in enumerate(data["users_and_packages"][username])
                ]
                bot.send_message(
                    chat_id,
                    f"‚úÖ <b>–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:</b>\n\n" + "\n".join(result),
                    parse_mode='html'
                )
            else:
                bot.send_message(
                    chat_id,
                    'üö´ <b>–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–∞—à –ª–∏—Å—Ç –ø—É—Å—Ç.</b>\n'
                    '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫! \n(–µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!)',
                    parse_mode='html'
                )


        elif call.data == 'btn2_3':

            username = call.from_user.username
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø–æ–¥–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ')
            if username in data["users_and_packages"] and len(data["users_and_packages"][username]) != 0:

                markup_mini = types.InlineKeyboardMarkup()

                for track_code in data["users_and_packages"][username]:
                    text = 'üîÑ'
                    if data['packages'][track_code] == "4":
                        text = '‚úÖ'
                    button = types.InlineKeyboardButton(

                        text=f"{text} {track_code}",

                        callback_data=f"track_{track_code}"

                    )

                    markup_mini.add(button)

                bot.send_message(

                    chat_id,

                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üì¶\n\n‚úÖ - –ø—Ä–∏–±—ã–ª –Ω–∞ —Å–∫–ª–∞–¥\nüîÑ - –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏",

                    reply_markup=markup_mini

                )

            else:

                bot.send_message(chat_id, 'üö´ <b>–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–∞—à –ª–∏—Å—Ç –ø—É—Å—Ç.</b>\n'
                    '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫! \n(–µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!)',
                    parse_mode='html')

            user_states[chat_id] = 'awaiting_confirmation'

        elif call.data == 'btn2':
            btn2 = True
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='btn2_1'),
                types.InlineKeyboardButton('üìú –¢–æ–≤–∞—Ä—ã', callback_data='btn2_2'),
                types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='btn2_3')
            )
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:", reply_markup=markup)

        elif call.data == 'btn3':
            bot.send_message(
                chat_id,
                'üè¢ <b>–ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏:</b>\n–ø—Ä–æ—Å–ø–µ–∫—Ç –†–∞–π—ã–º–±–µ–∫–∞ 512\n'
                'üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã (WhatsApp):</b> +7 776 609 09 46',
                parse_mode='html'
            )

    @bot.message_handler(func=lambda message: True)
    def handle_message(message):
        global phone_num, btn1, btn2_1, btn2_3
        chat_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = load_data()

        if btn1 and user_states.get(chat_id) == 'awaiting_phone_input':
            phone_num = message.text
            username = message.from_user.username

            if phone_num not in data['users']:
                data['users'].append(phone_num)
                number_q = f"{len(data['users']):02}"
            else:
                number_q = f"{data['users'].index(phone_num) + 1:02}"

            bot.send_message(
                chat_id,
                f"‚úÖ <b>–í–∞—à –∫–æ–¥:</b>\n"
                f"Âπø‰∏úÁúÅÂπøÂ∑ûÂ∏ÇËçîÊπæÂå∫Á´ôÂâçË∑Ø 57-3 ÂõΩÈôÖ \n6777 Â∫ìÊàøAlmaty-123-{number_q} ÊùéÁîü \n15649133333 ({phone_num})",
                parse_mode='html'
            )
            bot.send_message(chat_id, 'üìã –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞:')
            bot.send_photo(chat_id, photo=open('WhatsApp Image 2024-12-23 at 21.43.37.jpeg', 'rb'))
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –∫–æ–¥')
            user_states[chat_id] = None
            btn1 = False
            save_data(data)

        elif btn2_1 and user_states.get(chat_id) == 'awaiting_code_input':
            track_code = message.text
            username = message.from_user.username

            if username not in data["users_and_packages"]:
                data["users_and_packages"][username] = []
                update_data(data)

            if track_code in data["users_and_packages"][username]:
                bot.send_message(
                    chat_id,
                    'üì¶ <b>–≠—Ç–æ—Ç —Ç—Ä–µ–∫-–∫–æ–¥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!</b>',
                    parse_mode='html'
                )
            else:
                data["users_and_packages"][username].append(track_code)
                update_data(data)
                if track_code not in data['packages']:
                    add_package_info(track_code, '1')

                bot.send_message(
                    chat_id,
                    'üéâ <b>–ü–æ—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤!</b>',
                    parse_mode='html'
                )
                print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä')
            btn2_1 = False




        else:
            bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("track_"))
def handle_track_button(call):
    data = load_data()
    username = call.from_user.username
    track_code = str(call.data.split("_")[1])
    print(data["users_and_packages"][username])
    if track_code in data["users_and_packages"][username]:
        data["users_and_packages"][username].remove(track_code)
        del data["packages"][track_code]
        bot.send_message(call.message.chat.id, f"–¢–æ–≤–∞—Ä —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º {track_code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞")
        update_data(data)
    else:
        bot.send_message(call.message.chat.id, f"–¢–æ–≤–∞—Ä —Å —Ç—Ä–µ–∫-–∫–æ–¥–æ–º {track_code} —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫)")
